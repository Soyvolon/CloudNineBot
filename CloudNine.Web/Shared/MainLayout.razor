@inherits LayoutComponentBase
@inject NavigationManager _nav
@inject LoginService _login
@inject HttpClient _client
@inject ILogger<Startup> _logger
@inject ProtectedLocalStorage _localStorage
@inject IRefreshRequestService _refresh

@using System.Text.RegularExpressions

<head>
    <style>
        .sidebar {
            margin: 0;
            padding: 0;
            width: 200px;
            background-color: #f1f1f1;
            position: fixed;
            height: 100%;
            overflow: auto;
        }
    </style>
</head>
@if (connected)
{
    <div class="page">
        <div class="main">
            <div class="navbar navbar-expand-lg navbar-dark bg-dark">
                <div class="container">
                    <a class="navbar-brand" href="#">Cloud Nine Bot</a>
                    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarColor01" aria-controls="navbarColor01" aria-expanded="false" aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon"></span>
                    </button>

                    <div class="collapse navbar-collapse" id="navbarMain">
                        <ul class="navbar-nav mr-auto">
                            <li class="nav-item active">
                                <a class="nav-link" href="#">
                                    <span class="sr-only">(current)</span>
                                </a>
                            </li>
                            <li class="nav-item active">
                                <a class="nav-link" href="/dash">
                                    Dashboard
                                    <span class="sr-only">(current)</span>
                                </a>
                            </li>
                        </ul>
                    </div>
                    @if (_login.LoggedIn)
                    {
                        <div class="btn btn-outline-success">
                            <img class="rounded-circle z-depth-2" alt="25x25" width="25" src="@_login.ActiveUser?.AvatarUrl" />
                            @(_login.ActiveUser?.Username ?? "user")
                        </div>
                        <div class="m-1"></div>
                        <a href="/login?logout=true">
                            <span class="btn-primary btn" type="submit">Logout</span>
                        </a>
                    }
                    else
                    {
                        <a href="/login?start=true">
                            <span class="btn-primary btn" type="submit">Login</span>
                        </a>
                    }
                </div>
            </div>
            <div>
                @if (_nav.ToBaseRelativePath(_nav.Uri).StartsWith("dash"))
                {
                    if (_login.LoggedIn)
                    {
                        if (dashNavR.IsMatch(_nav.ToBaseRelativePath(_nav.Uri)))
                        {
                            <!-- Dash only side menu goes here -->
                            <nav class="sidebar">
                                <ul class="nav nav-pills flex-column">
                                    <li class="nav-item">
                                        <a class="nav-link active" href="/dash">@(_login.ActiveGuild?.Name + " " ?? "")Dashboard</a>
                                    </li>
                                    @if (_login.Guilds is not null)
                                    {
                                        @foreach (var i in _login.Guilds)
                                        {
                                            if (_login.ActiveGuild is null || i.Key != _login.ActiveGuild.Id)
                                            {
                                            <li class="nav-item">
                                                <a class="nav-link" href="/dash/menu?guild=@i.Key">
                                                    <img class="rounded-circle z-depth-2" alt="25x25" width="25" src="@i.Value.IconUrl" />
                                                    @i.Value.Name
                                                </a>
                                            </li>
                                            }
                                        }
                                    }
                                </ul>
                            </nav>
                        }

                        <!-- Show the intro page which has guild selection and no sidebar -->
                    }
                }
                <div class="content px-4">
                    <div class="container">
                        @Body
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="progress">
        <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="@_login.LoadState" aria-valuemin="0" aria-valuemax="@LoginService.MaxLoad" style="width: 75%;"></div>
    </div>
}

@code {
    private bool connected;
    public Regex dashNavR = new Regex(@"^dash\/.");

    [CascadingParameter(Name = "Cookies")]
    public Dictionary<string, string> Cookies { get; set; }

    protected override void OnInitialized()
    {
        _refresh.RefreshRequested += RefreshSelf;
        _login.LoadIncreased += RefreshSelf;

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Attempt to see if the user is already logged in.
            await AttemptReLogin();
            connected = true;
            _refresh.CallRequestRefresh();
        }

        if (await SetActiveGuild())
            _refresh.CallRequestRefresh();

        await base.OnAfterRenderAsync(firstRender);
    }

    private void RefreshSelf()
    {
        StateHasChanged();
    }

    private async Task<bool> SetActiveGuild()
    {
        var uri = new Uri(_nav.Uri);

        string? guild = HttpUtility.ParseQueryString(uri.Query).Get("guild");
        if (guild is not null)
        {
            if (ulong.TryParse(guild, out ulong guildId))
                return await _login.SetActiveGuild(guildId);
        }

        return false;
    }

    private async Task AttemptReLogin()
    {
        var uri = new Uri(_nav.Uri);
        string? code = HttpUtility.ParseQueryString(uri.Query).Get("code");
        string? state = HttpUtility.ParseQueryString(uri.Query).Get("state");

        if (code is not null && state is not null)
            return; // ignore this if it is a login attempt

        if (Cookies is null) return;

        if (Cookies.TryGetValue("login_state_key", out var stateVal))
        {
            if (!await _login.RestoreAsync(stateVal))
            {
                await _localStorage.DeleteAsync("state");
            }
        }
    }
}